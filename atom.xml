<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Linnever]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://linnever.github.io/"/>
  <updated>2015-12-13T10:24:14.842Z</updated>
  <id>http://linnever.github.io/</id>
  
  <author>
    <name><![CDATA[Lin]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[git使用(1)]]></title>
    <link href="http://linnever.github.io/2015/12/13/git%E4%BD%BF%E7%94%A8/"/>
    <id>http://linnever.github.io/2015/12/13/git使用/</id>
    <published>2015-12-13T09:52:03.000Z</published>
    <updated>2015-12-13T10:24:14.842Z</updated>
    <content type="html"><![CDATA[<p>git 版本返回<br><a id="more"></a></p>
<h2 id="查看commit历史">查看commit历史</h2><p><font color="#7cb1be"><code>$ git log</code></font> ：查看提交的历史。</p>
<p><img src="http://i.imgur.com/wzJxS1n.png" alt=""></p>
<h2 id="退出git_log命令">退出<code>git log</code>命令</h2><p>输入<code>q</code>后就退出了。</p>
<h2 id="版本返回">版本返回</h2><p><font color="#7cb1be"><code>git reset --hard commit_id</code></font>：不需要输入全部的id名，输入前几位就行。</p>
<h2 id="版本向前">版本向前</h2><p><font color="#7cb1be"><code>git reflog</code></font>：查看输入命令历史<br><img src="http://i.imgur.com/XUtFrh2.png" alt=""></p>
<p>再使用<font color="#7cb1be"><code>git reset --hard commit_id</code></font>回到想要的版本。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>git 版本返回<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://linnever.github.io/tags/git/"/>
    
      <category term="git" scheme="http://linnever.github.io/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Deep understanding of Arrays.sort()]]></title>
    <link href="http://linnever.github.io/2015/12/08/Deep-understanding-of-Arrays-sort/"/>
    <id>http://linnever.github.io/2015/12/08/Deep-understanding-of-Arrays-sort/</id>
    <published>2015-12-08T12:20:34.000Z</published>
    <updated>2015-12-08T12:47:34.988Z</updated>
    <content type="html"><![CDATA[<p>when I meet this program-<a href="https://leetcode.com/problems/largest-number/" target="_blank" rel="external">Largest Number-Leetcoode</a>.I have no idea how to deal with it.So I know this method-<code>Arrays.sort(T[],comparetor &lt; ? super T&gt; c)</code>.<br><a id="more"></a><br>Arrays.sort(T[], Comparator &lt; ? super T &gt; c) is a method for sorting user-defined object array. The official Java Doc briefly describe what it does, but not much for deep understanding. In this post, I will walk though the key information for deeper understanding of this method.</p>
<h2 id="There_are_some_examples_to_show_this_method_how_to_work-">There are some examples to show this method how to work.</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		size = s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogSizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o1.size - o2.size;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySort</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="number">2</span>);</span><br><span class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="number">1</span>);</span><br><span class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line">		Dog[] dogArray = &#123;d1, d2, d3&#125;;</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> DogSizeComparator());	</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDogs</span><span class="params">(Dog[] dogs)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Dog d: dogs)</span><br><span class="line">			System.out.print(d.size + <span class="string">" "</span> );</span><br><span class="line"> </span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<h2 id="The_Strategy_Pattern_Used_in_Arrays-sort()">The Strategy Pattern Used in Arrays.sort()</h2><p>In brief,Strategy pattern enables different algorithms get  selected at runtime.In this case,by passing diffrent Compartor,different algorithms can get selected.Based on example above and now assuming you have another Comparator which compares Dogs by weight instead of by size,you can simply create a new Comparator like this following.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size;</span><br><span class="line">	<span class="keyword">int</span> weight;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">		size = s;</span><br><span class="line">		weight = w; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogSizeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o1.size - o2.size;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogWeightComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o1.weight - o2.weight;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySort</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="number">2</span>, <span class="number">50</span>);</span><br><span class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="number">3</span>, <span class="number">40</span>);</span><br><span class="line"> </span><br><span class="line">		Dog[] dogArray = &#123;d1, d2, d3&#125;;</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> DogSizeComparator());	</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(dogArray, <span class="keyword">new</span> DogWeightComparator());	</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDogs</span><span class="params">(Dog[] dogs)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Dog d: dogs)</span><br><span class="line">			System.out.print(<span class="string">"size="</span>+d.size + <span class="string">" weight="</span> + d.weight + <span class="string">" "</span>);</span><br><span class="line"> </span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size=<span class="number">2</span> weight=<span class="number">50</span> size=<span class="number">1</span> weight=<span class="number">30</span> size=<span class="number">3</span> weight=<span class="number">40</span> </span><br><span class="line">size=<span class="number">1</span> weight=<span class="number">30</span> size=<span class="number">2</span> weight=<span class="number">50</span> size=<span class="number">3</span> weight=<span class="number">40</span> </span><br><span class="line">size=<span class="number">1</span> weight=<span class="number">30</span> size=<span class="number">3</span> weight=<span class="number">40</span> size=<span class="number">2</span> weight=<span class="number">50</span></span><br></pre></td></tr></table></figure></p>
<p>Comparator is just an interface. Any Comparator that implements this interface can be used during run-time. This is the key idea of Strategy design pattern.</p>
<h2 id="Why_Use_“super”?">Why Use “super”?</h2><p>It is straightforward if “Comparator &lt; T &gt; c” is the parameter, but the second parameter is “Comparator&lt; ? super T &gt; c”. &lt; ? super T &gt; means the type can be T or its super types. Why it allows super types? The answer is: This approach allows using same comparator for all sub classes. This is almost obvious in the following example.<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line"> </span><br><span class="line">class <span class="keyword">Animal</span>&#123;</span><br><span class="line">	int size;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Dog extends <span class="keyword">Animal</span>&#123;</span><br><span class="line">	public Dog(int s)&#123;</span><br><span class="line">		size = s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Cat extends <span class="keyword">Animal</span>&#123;</span><br><span class="line">	public Cat(int s)&#123;</span><br><span class="line">		size  = s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class AnimalSizeComparator implements Comparator&lt;<span class="keyword">Animal</span>&gt;&#123;</span><br><span class="line"> </span><br><span class="line">	@Override</span><br><span class="line">	public int compare(<span class="keyword">Animal</span> o1, <span class="keyword">Animal</span> o2) &#123;</span><br><span class="line">		return o1.size - o2.size;</span><br><span class="line">	&#125;</span><br><span class="line">	//in this way, all sub classes <span class="keyword">of</span> <span class="keyword">Animal</span> can use this comparator.</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public class ArraySort &#123;</span><br><span class="line"> </span><br><span class="line">	public static void main(String<span class="comment">[]</span> args) &#123;</span><br><span class="line">		Dog d1 = new Dog(2);</span><br><span class="line">		Dog d2 = new Dog(1);</span><br><span class="line">		Dog d3 = new Dog(3);</span><br><span class="line"> </span><br><span class="line">		Dog<span class="comment">[]</span> dogArray = &#123;d1, d2, d3&#125;;</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(dogArray, new AnimalSizeComparator());	</span><br><span class="line">		printDogs(dogArray);</span><br><span class="line"> </span><br><span class="line">		System.out.println();</span><br><span class="line"> </span><br><span class="line">		//when you have an array <span class="keyword">of</span> Cat, same Comparator can be used. </span><br><span class="line">		Cat c1 = new Cat(2);</span><br><span class="line">		Cat c2 = new Cat(1);</span><br><span class="line">		Cat c3 = new Cat(3);</span><br><span class="line"> </span><br><span class="line">		Cat<span class="comment">[]</span> catArray = &#123;c1, c2, c3&#125;;</span><br><span class="line">		printDogs(catArray);</span><br><span class="line"> </span><br><span class="line">		Arrays.sort(catArray, new AnimalSizeComparator());	</span><br><span class="line">		printDogs(catArray);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	public static void printDogs(<span class="keyword">Animal</span><span class="comment">[]</span> animals)&#123;</span><br><span class="line">		for(<span class="keyword">Animal</span> a: animals)</span><br><span class="line">			System.out.print(<span class="string">"size="</span>+a.size + <span class="string">" "</span>);</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size=<span class="number">2</span> size=<span class="number">1</span> size=<span class="number">3</span> </span><br><span class="line">size=<span class="number">1</span> size=<span class="number">2</span> size=<span class="number">3</span> </span><br><span class="line"></span><br><span class="line">size=<span class="number">2</span> size=<span class="number">1</span> size=<span class="number">3</span> </span><br><span class="line">size=<span class="number">1</span> size=<span class="number">2</span> size=<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Reference">Reference</h2><p><a href="http://www.programcreek.com/2013/11/arrays-sort-comparator/" target="_blank" rel="external">Deep Understanding of Arrays.sort()</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>when I meet this program-<a href="https://leetcode.com/problems/largest-number/">Largest Number-Leetcoode</a>.I have no idea how to deal with it.So I know this method-<code>Arrays.sort(T[],comparetor &lt; ? super T&gt; c)</code>.<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://linnever.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://linnever.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reading-today-one]]></title>
    <link href="http://linnever.github.io/2015/12/01/Reading-today-one/"/>
    <id>http://linnever.github.io/2015/12/01/Reading-today-one/</id>
    <published>2015-12-01T06:01:11.000Z</published>
    <updated>2015-12-01T06:03:55.421Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://webpro.github.io/programming-principles/" target="_blank" rel="external">Programming Principles</a></li>
<li><a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="external">Google Java Style</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="http://webpro.github.io/programming-principles/" target="_blank" rel="external">Programming Principles</a></li>
<li><a hre]]>
    </summary>
    
      <category term="Reading-list" scheme="http://linnever.github.io/tags/Reading-list/"/>
    
      <category term="Reading-list" scheme="http://linnever.github.io/categories/Reading-list/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Factory_Pattern]]></title>
    <link href="http://linnever.github.io/2015/11/28/New%20Document/"/>
    <id>http://linnever.github.io/2015/11/28/New Document/</id>
    <published>2015-11-28T06:23:14.000Z</published>
    <updated>2015-11-28T10:34:42.211Z</updated>
    <content type="html"><![CDATA[<p>The Factory pattern provides a way to use an instance as a object factory.The factory can return an instance of one of several possible classes(in a subclass hierarchy),depending on the date provided to it.<br><a id="more"></a></p>
<h2 id="Where_to_use">Where to use</h2><ul>
<li>when a class can anticipate which kind of class of object it must create.</li>
<li></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>The Factory pattern provides a way to use an instance as a object factory.The factory can return an instance of one of several possible classes(in a subclass hierarchy),depending on the date provided to it.<br>]]>
    
    </summary>
    
      <category term="Creational_Patterns" scheme="http://linnever.github.io/tags/Creational-Patterns/"/>
    
      <category term="Factory_Pattern" scheme="http://linnever.github.io/tags/Factory-Pattern/"/>
    
      <category term="Design_pattern" scheme="http://linnever.github.io/categories/Design-pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Strategy_Pattern]]></title>
    <link href="http://linnever.github.io/2015/11/26/Strategy_Pattern/"/>
    <id>http://linnever.github.io/2015/11/26/Strategy_Pattern/</id>
    <published>2015-11-26T04:22:14.000Z</published>
    <updated>2015-11-28T06:33:27.820Z</updated>
    <content type="html"><![CDATA[<h1 id="Strategy_Pattern">Strategy Pattern</h1><p>What’s the Strategy Pattern ?<br>In the Wiki:</p>
<ul>
<li>defines a family of algorithms,</li>
<li>encapsulates each algorithm</li>
<li>makes the algorithms interchangeable within that family.</li>
</ul>
<a id="more"></a>
<h2 id="Motivation:">Motivation:</h2><p>There are common situation when classes differ only in their behavior.For this case is good to isolate the algorithms in separate classes in order to have the ability to select different algorithm at runtime.</p>
<h2 id="Intent">Intent</h2><p>Difine a famliy of algorithms,ecapsulate each one, and make them interchangeable strategy lets the algorithm vary independently from clients that use it.</p>
<h2 id="Example">Example</h2><p><img src="http://www.tutorialspoint.com/design_pattern/images/strategy_pattern_uml_diagram.jpg" alt=""></p>
<p>Strategy -define an interface common to all supported algorithms.Context uses this interface to call algorithm defined by a StrategyPatternDemo.</p>
<p>Context</p>
<ul>
<li>contains a reference to a strategy object.</li>
<li>may define an interface that lets strategy accessing its data.</li>
</ul>
<h3 id="Step_1">Step 1</h3><p>Strategy.java<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Strategy</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span>(<span class="params"><span class="keyword">int</span> num1, <span class="keyword">int</span> num2</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Step_2">Step 2</h3><p>OperationAdd.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 + num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>OperationSubstract.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationSubstract</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 - num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>OperationMultiply.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationMultiply</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 * num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Step_3">Step 3</h3><p>Context.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">executeStrategy</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">return</span> strategy.<span class="title">doOperation</span><span class="params">(num1, num2)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Step_4">Step 4</h3><p>StrategyPatternDemo.java</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> StrategyPatternDemo &#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationAdd());		</span><br><span class="line">      System.out.println(<span class="string">"10 + 5 = "</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">      context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationSubstract());		</span><br><span class="line">      System.out.println(<span class="string">"10 - 5 = "</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">      context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationMultiply());		</span><br><span class="line">      System.out.println(<span class="string">"10 * 5 = "</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Referance">Referance</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Strategy_pattern" target="_blank" rel="external">https://en.wikipedia.org/wiki/Strategy_pattern</a> </li>
<li><a href="http://www.tutorialspoint.com/design_pattern/strategy_pattern.htm" target="_blank" rel="external">http://www.tutorialspoint.com/design_pattern/strategy_pattern.htm</a></li>
<li><a href="http://www.oodesign.com/strategy-pattern.html" target="_blank" rel="external">http://www.oodesign.com/strategy-pattern.html</a></li>
</ul>
<h2 id="Adavanteges_and_Disadvantages">Adavanteges and Disadvantages</h2><ul>
<li><a href="http://www.cnblogs.com/zhenyulu/articles/82017.html" target="_blank" rel="external">http://www.cnblogs.com/zhenyulu/articles/82017.html</a></li>
<li><a href="http://www.cnblogs.com/zhangronghua/archive/2008/07/16/1244207.html" target="_blank" rel="external">http://www.cnblogs.com/zhangronghua/archive/2008/07/16/1244207.html</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Strategy_Pattern">Strategy Pattern</h1><p>What’s the Strategy Pattern ?<br>In the Wiki:</p>
<ul>
<li>defines a family of algorithms,</li>
<li>encapsulates each algorithm</li>
<li>makes the algorithms interchangeable within that family.</li>
</ul>]]>
    
    </summary>
    
      <category term="Behavioral Patterns" scheme="http://linnever.github.io/tags/Behavioral-Patterns/"/>
    
      <category term="Design_pattern" scheme="http://linnever.github.io/tags/Design-pattern/"/>
    
      <category term="Design_pattern" scheme="http://linnever.github.io/categories/Design-pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java-Autoboxing-and-Unboxing]]></title>
    <link href="http://linnever.github.io/2015/11/17/Java-Autoboxing-Unboxing/"/>
    <id>http://linnever.github.io/2015/11/17/Java-Autoboxing-Unboxing/</id>
    <published>2015-11-17T11:52:31.000Z</published>
    <updated>2015-11-17T11:53:12.404Z</updated>
    <content type="html"><![CDATA[<h1 id="Java-Autoboxing-and-Unboxing">Java-Autoboxing-and-Unboxing</h1><p>Autoboxing and unboxing is introduced in Java1.5 to automatically convert primitive type into boxed primitive(Object or Wrapper class).Autoboxing allows you to use primitive and object type interchangeably in Java on many place like assignment,method invocation.<br><a id="more"></a><br>If you hava been using <strong>Collecions </strong>like HashMap or ArrayList before Java 1.5 then you are familiar with the issues like you can not directly put primitives into Collections, instead you first need to convert them into Object only then only you can put them into Collections. Wrapper class like Integer, Double and Boolean helps for converting primitive to Object but that clutter the code. With the introduction of autoboxing and unboxing in Java this primitive to object conversion happens automatically by Java compiler which makes code more readable.But autoboxing and unboxing comes with certain caveats which needs to be understood before using them in production code and it becomes even more important because they are automatic and can create subtle bugs if you are not sure when autoboxing  in Java code occurs and when unboxing happens.</p>
<h2 id="What_is_autoboxing_and_unboxing_in_Java">What is autoboxing and unboxing in Java</h2><p><strong>autoboxing and unboxing</strong> :converts a primitive type like int into corresponding wrapper class object e.g. Integer.opposite case is called <strong>unboxing</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Primitive type</th>
<th style="text-align:center">Wrapper class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">bollean</td>
<td style="text-align:center">Boolean</td>
</tr>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">Byte</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">Character</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">Float</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">Integer</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">Long</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">Short</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">Double</td>
</tr>
</tbody>
</table>
<h2 id="When_does_autoboxing_and_unboxing_occurs_in_Java">When does autoboxing and unboxing occurs in Java</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before autoboxing</span></span><br><span class="line"><span class="type">Integer</span> <span class="class"><span class="keyword">object</span><span class="title">=Integer</span>.<span class="title">valueOf</span>(</span><span class="number">3</span>);</span><br><span class="line"><span class="type">Int</span> primoitive=<span class="class"><span class="keyword">object</span>.<span class="title">intValue</span>(</span>);</span><br><span class="line"><span class="comment">//after java5</span></span><br><span class="line"><span class="type">Integer</span> <span class="class"><span class="keyword">object</span><span class="title">=3</span>;</span><span class="comment">//autoboxing -primitive to wrapper conversion</span></span><br><span class="line">int iPrimitive = iObject; <span class="comment">//unboxing - object to primitive conversion</span></span><br></pre></td></tr></table></figure>
<h2 id="Unnecessary_Object_creation_due_to_Autoboxing_in_Java">Unnecessary Object creation due to Autoboxing in Java</h2><p>One of the danger of autoboxing is throw away object which gets created if autoboxing occurs in a loop.Here is an example of how unnecessary object can slow down your application:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1000</span>;i&lt;<span class="number">5000</span>;i++)</span><br><span class="line">sum+=i;</span><br></pre></td></tr></table></figure></p>
<p>In this code <code>sum+=i</code> will expand as <code>sum=sum+i</code> and since + operator is not applicable to Integer object it will trigger unboxing of sum Integer object and then autoboxing of result which will be stored in sum which is Integer as shown below :<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum = sum.intValue() + i;</span><br><span class="line"><span class="type">Integer</span> sum = new <span class="type">Integer</span>(<span class="literal">result</span>);</span><br></pre></td></tr></table></figure></p>
<p>here since sum is Integer, it will create around 4000 unnecessary Intger object which are just throw away and if this happens on large scale has It potential to slow down system with frequent GC for arithmetic calculation always prefer primitive over boxed primitive and look for unintentional autoboxing in Java.</p>
<h2 id="Reference">Reference</h2><ul>
<li><a href="http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html" target="_blank" rel="external">http://javarevisited.blogspot.com/2012/07/auto-boxing-and-unboxing-in-java-be.html</a></li>
<li><a href="http://droidyue.com/blog/2015/04/07/autoboxing-and-autounboxing-in-java/" target="_blank" rel="external">http://droidyue.com/blog/2015/04/07/autoboxing-and-autounboxing-in-java/</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Java-Autoboxing-and-Unboxing">Java-Autoboxing-and-Unboxing</h1><p>Autoboxing and unboxing is introduced in Java1.5 to automatically convert primitive type into boxed primitive(Object or Wrapper class).Autoboxing allows you to use primitive and object type interchangeably in Java on many place like assignment,method invocation.<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://linnever.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://linnever.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Reflection]]></title>
    <link href="http://linnever.github.io/2015/11/17/Java-Reflection/"/>
    <id>http://linnever.github.io/2015/11/17/Java-Reflection/</id>
    <published>2015-11-17T06:37:16.000Z</published>
    <updated>2015-11-17T06:41:53.811Z</updated>
    <content type="html"><![CDATA[<h1 id="Java_Reflection">Java Reflection</h1><p>“Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in Java Virtual machine.” The concept is ofen mixed with introspecion.The following are their definitions from Wiki:<br><a id="more"></a></p>
<h2 id="what_is_Introspection_and_reflection?">what is Introspection and reflection?</h2><ol>
<li>Introspection is the ability of a program to examine the type or properties of an object at runtime.</li>
<li>Relection is the ability of a program to examine and modify the structure and behavior of an object at runtime.</li>
</ol>
<h2 id="Why_do_we_need_reflection?">Why do we need reflection?</h2><ol>
<li>Examine an object’s class at runtime</li>
<li>Construct an object for a class at runtime</li>
<li>Examine a class’s field adn method at runtime</li>
<li>Invoke any method of an object at runtime</li>
<li>Change accessibility flag of Constructor, Method,Field</li>
<li>etc.</li>
</ol>
<p>For example, JUnit use reflection to look through methods tagged with the @Test annotation, and then call those methods when running the unit test. <a href="http://www.programcreek.com/2012/02/junit-tutorial-2-annotations/" target="_blank" rel="external">(Here is a set of examples of how to use JUnit.)</a></p>
<p>For web frameworks, product developers define their own implementation of interfaces and classes and put is in the configuration files. Using reflection,it can quickly dynamically initialize the classes required.</p>
<p>For example ,Spring uses bean configuration such as<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="property">id</span>=<span class="string">"someID"</span> <span class="type">class</span>=<span class="string">"com.Foo"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"someField"</span> value=<span class="string">"someValue"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>
<p>When the Spring context processes this <bean> element,it will use Class.forName(String) with the arguement”com.Foo”   to instantiate the Class.It will then again use Reflection to get the appropriate setter for the <property> element and set its value to the sepcified value.</property></bean></p>
<p>The same mechanism is also used for Servlet web application<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Servlet-name</span>&gt;</span>someServlet<span class="tag">&lt;/<span class="title">Servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Servlet-class</span>&gt;</span>com.Foo<span class="tag">&lt;/<span class="title">Servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="how_to_use_reflection?">how to use reflection?</h2><h3 id="Example_1:_Get_Class_name_from_object">Example 1: Get Class name from object</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package myreflection;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReflectionHelloWorld</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line">		Foo f = <span class="keyword">new</span> Foo();</span><br><span class="line">		System.<span class="keyword">out</span>.println(f.getClass().getName());			</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"abc"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">myreflection</span><span class="class">.Foo</span></span><br></pre></td></tr></table></figure>
<h3 id="Example_2:Invoke_method_on_unknown_object">Example 2:Invoke method on unknown object</h3><p>For the code example blow ,image the types of an object is unknown.By using reflection,the code can use the object and find out if the object has a method called “print” and the call it.<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package myreflection;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="type">Method</span>;</span><br><span class="line"> </span><br><span class="line">public class <span class="type">ReflectionHelloWorld</span> &#123;</span><br><span class="line">	public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args)&#123;</span><br><span class="line">		<span class="type">Foo</span> f = new <span class="type">Foo</span>();</span><br><span class="line"> </span><br><span class="line">		<span class="type">Method</span> <span class="keyword">method</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">method</span> = f.getClass().getMethod(<span class="string">"print"</span>, new <span class="type">Class</span>&lt;?&gt;[<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">method</span>.invoke(f);</span><br><span class="line">		&#125; catch (<span class="type">Exception</span> e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;			</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class <span class="type">Foo</span> &#123;</span><br><span class="line">	public <span class="type">void</span> print() &#123;</span><br><span class="line">		<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"abc"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Example_3:_Create_object_from_Class_instance">Example 3: Create object from Class instance</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myreflection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ReflectionHelloWorld &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)&#123;</span><br><span class="line">		<span class="comment">//create instance of "Class"</span></span><br><span class="line">		<span class="keyword">Class</span>&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			c=<span class="keyword">Class</span>.forName(<span class="string">"myreflection.Foo"</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		<span class="comment">//create instance of "Foo"</span></span><br><span class="line">		Foo f = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			f = (Foo) c.newInstance();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;	</span><br><span class="line"> </span><br><span class="line">		f.<span class="keyword">print</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">print</span>() &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"abc"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Example_4:_Get_constructor_and_create_instance">Example 4: Get constructor and create instance</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myreflection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ReflectionHelloWorld &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)&#123;</span><br><span class="line">		<span class="comment">//create instance of "Class"</span></span><br><span class="line">		<span class="keyword">Class</span>&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			c=<span class="keyword">Class</span>.forName(<span class="string">"myreflection.Foo"</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		<span class="comment">//create instance of "Foo"</span></span><br><span class="line">		Foo f1 = <span class="keyword">null</span>;</span><br><span class="line">		Foo f2 = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">		<span class="comment">//get all constructors</span></span><br><span class="line">		Constructor&lt;?&gt; cons[] = c.getConstructors();</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			f1 = (Foo) cons[<span class="number">0</span>].newInstance();</span><br><span class="line">			f2 = (Foo) cons[<span class="number">1</span>].newInstance(<span class="string">"abc"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;	</span><br><span class="line"> </span><br><span class="line">		f1.<span class="keyword">print</span>();</span><br><span class="line">		f2.<span class="keyword">print</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">	String s; </span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> Foo()&#123;&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> Foo(String s)&#123;</span><br><span class="line">		<span class="keyword">this</span>.s=s;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">print</span>() &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span></span><br><span class="line">abc</span><br></pre></td></tr></table></figure>
<h3 id="Example_5:_Change_array_size_though_reflection">Example 5: Change array size though reflection</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myreflection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="keyword">Array</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> class ReflectionHelloWorld &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		<span class="built_in">int</span>[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">		<span class="built_in">int</span>[] newIntArray = (<span class="built_in">int</span>[]) changeArraySize(intArray, <span class="number">10</span>);</span><br><span class="line">		<span class="built_in">print</span>(newIntArray);</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">String</span>[] atr = &#123; <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span> &#125;;</span><br><span class="line">		<span class="keyword">String</span>[] str1 = (<span class="keyword">String</span>[]) changeArraySize(atr, <span class="number">10</span>);</span><br><span class="line">		<span class="built_in">print</span>(str1);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// change array size</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">Object</span> changeArraySize(<span class="keyword">Object</span> obj, <span class="built_in">int</span> len) &#123;</span><br><span class="line">		Class&lt;?&gt; arr = obj.getClass().getComponentType();</span><br><span class="line">		<span class="keyword">Object</span> newArray = <span class="keyword">Array</span>.newInstance(arr, len);</span><br><span class="line"> </span><br><span class="line">		<span class="comment">//do array copy</span></span><br><span class="line">		<span class="built_in">int</span> co = <span class="keyword">Array</span>.getLength(obj);</span><br><span class="line">		System.arraycopy(obj, <span class="number">0</span>, newArray, <span class="number">0</span>, co);</span><br><span class="line">		<span class="keyword">return</span> newArray;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// print</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">print</span>(<span class="keyword">Object</span> obj) &#123;</span><br><span class="line">		Class&lt;?&gt; c = obj.getClass();</span><br><span class="line">		<span class="keyword">if</span> (!c.isArray()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"\nArray length: "</span> + <span class="keyword">Array</span>.getLength(obj));</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">Array</span>.getLength(obj); i++) &#123;</span><br><span class="line">			System.out.<span class="built_in">print</span>(<span class="keyword">Array</span>.<span class="built_in">get</span>(obj, i) + <span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array length: <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">Array length: <span class="number">10</span></span><br><span class="line">a b c d e null null null null null</span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2><ul>
<li><a href="http://www.programcreek.com/2013/09/java-reflection-tutorial/" target="_blank" rel="external">http://www.programcreek.com/2013/09/java-reflection-tutorial/</a></li>
</ul>
<h2 id="You_may_Also_Like">You may Also Like</h2><ul>
<li><a href="http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html" target="_blank" rel="external">http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html</a></li>
<li><a href="http://www.cnblogs.com/jqyp/archive/2012/03/29/2423112.html" target="_blank" rel="external">http://www.cnblogs.com/jqyp/archive/2012/03/29/2423112.html</a></li>
<li><a href="http://blog.csdn.net/liujiahan629629/article/details/18013523" target="_blank" rel="external">http://blog.csdn.net/liujiahan629629/article/details/18013523</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Java_Reflection">Java Reflection</h1><p>“Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in Java Virtual machine.” The concept is ofen mixed with introspecion.The following are their definitions from Wiki:<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://linnever.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://linnever.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Avoding magic number]]></title>
    <link href="http://linnever.github.io/2015/11/05/Avoding-magic-number/"/>
    <id>http://linnever.github.io/2015/11/05/Avoding-magic-number/</id>
    <published>2015-11-05T14:34:01.000Z</published>
    <updated>2015-11-06T02:36:09.427Z</updated>
    <content type="html"><![CDATA[<p>Avoid “magic numbers”</p>
<p>《<strong>Code Complete</strong>》 SAYS:</p>
<p>Magic numbers are literal numbers such as 100 or 47524 that appear in the middle of a program without explanation.If your program in a language that supports named constants,use them instead.If you can’t use named constants,use global variables when it is feasible to.</p>
<a id="more"></a>
<p>Avoiding magic numbers yields three advantages:</p>
<ul>
<li>Changes can be made more reliably.If you use named constants,you won’t overlook one of the 100s, or change a 100 that refers to someting else.</li>
<li>Changes can be made more easily.When the maxinum number of entries changes from<br>100 to 200,if you are using magic number you have to find all the 100s and chan<em>**</em>ge them to 200s.If you are use 100+1 or 100-1 you ‘ll also have to find all the 101s and 99s and change them  from 201s to 199s.If you are using a named constands,you simply change the definition of the constant from 100 to 200 in one place.</li>
<li>Your code is more readable.</li>
</ul>
<p><strong>note:</strong><br>Replacing numbers by constants makes sense if the number carries a meaning that is not inherently obvious by looking at its value alone.</p>
<p>For instance,<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">productType = 221; // BAD: the number needs to be looked up somewhere to <span class="keyword">understand</span> its meaning</span><br><span class="line">productType = PRODUCT_TYPE_CONSUMABLE; // GOOD: the constant <span class="keyword">is</span> self-describing</span><br></pre></td></tr></table></figure></p>
<p>On the other hand,<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int initialCount = <span class="number">0</span>; // GOOD: <span class="keyword">in</span> this <span class="keyword">context</span> zero really means zero</span><br><span class="line">int initialCount = ZERO; // BAD: the number value <span class="keyword">is</span> clear, <span class="keyword">and</span> there<span class="attribute">'s</span> no need <span class="keyword">to</span> add a self-referencing <span class="keyword">constant</span> name <span class="keyword">if</span> there<span class="attribute">'s</span> no other meaning</span><br></pre></td></tr></table></figure></p>
<p>In Java ,using constants may let programs run fast.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Avoid “magic numbers”</p>
<p>《<strong>Code Complete</strong>》 SAYS:</p>
<p>Magic numbers are literal numbers such as 100 or 47524 that appear in the middle of a program without explanation.If your program in a language that supports named constants,use them instead.If you can’t use named constants,use global variables when it is feasible to.</p>]]>
    
    </summary>
    
      <category term="Java" scheme="http://linnever.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://linnever.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多态]]></title>
    <link href="http://linnever.github.io/2015/10/25/%E5%A4%9A%E6%80%81/"/>
    <id>http://linnever.github.io/2015/10/25/多态/</id>
    <published>2015-10-25T14:37:16.000Z</published>
    <updated>2015-10-26T05:58:34.594Z</updated>
    <content type="html"><![CDATA[<p>多态</p>
<p><strong>多态是继数据抽象和继承之后的第三种基本特征</strong></p>
<p>多态通过分离<strong>做什么</strong>和<strong>怎么做</strong>。多态不但能过改善代码额组织结构和可读性，还能够创建<strong>可扩展</strong>的程序——无论什么时候，需要新功能的时候都能添加。多态的作用是消除<strong>类型</strong>的耦合关系（耦合：对象之间的依赖性，对象之间耦合度越高，维护成本越高。）<br><a id="more"></a></p>
<p>###绑定###</p>
<p>概念：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来。对java来说，绑定分为静态绑定和动态绑定；或者叫做前期绑定和后期绑定。</p>
<p>1.静态绑定：</p>
<p>在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。针对java简单的可以理解为程序编译期的绑定；这里特别说明一点，java当中的方法只有<strong>final</strong>，<strong>static</strong>，<strong>private</strong>和构造方法是前期绑定。</p>
<p>2.动态绑定：（<strong>针对的是方法</strong>）</p>
<p>后期绑定：在运行时根据具体对象的类型进行绑定。<br>若一种语言实现了后期绑定，同时必须提供一些机制，可在运行期间判断对象的类型，并分别调用适当的方法。也就是说，编译器此时依然不知道对象的类型，但方法调用机制能自己去调查，找到正确的方法主体。不同的语言对后期绑定的实现方法是有所区别的。但我们至少可以这样认为：它们都要在对象中安插某些特殊类型的信息。</p>
<p><strong>多态表现形式：</strong></p>
<ol>
<li>父类的引用页可以接收自己的子类对象。</li>
<li>父类的引用指向自己的子类对象。</li>
</ol>
<ol>
<li>静态方法属于类方法（static修饰，对应的是实例方法，实例方法是要通过创建对象，实例化才能通过对象掉用的方法，类方法可以直接通过类来调用）是静态绑定。</li>
<li>非静态方法属于动态绑定</li>
<li>属性成员都属于静态绑定，只和声明的类型相关。（动态方法才有override（重写），静态方法，静态域，动态域都是不会被覆盖的）</li>
</ol>
<p>Father fson=new Son();</p>
<p>创建一个Son的对象，并把得到的引用立即赋值给Father。fson是父类的引用，类型是Father。</p>
<p>fson调用的静态域，静态方法都是Father的方法，与子类无关。</p>
<p>如果子类Sun中重写了父类的方法，那向上转型中，子类转型为父类的类型，类接口中只可能会丢失方法（子类是父类的超集，丢失子类有而父类没有的方法），那么fsun就不能调用丢失的方法（即父类没有的方法而子类有的方法），但是可以调用子类重写的方法（不是父类的方法），不能调用父类被重写的方法。</p>
<p><img src="http://i.imgur.com/311Mfuc.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>多态</p>
<p><strong>多态是继数据抽象和继承之后的第三种基本特征</strong></p>
<p>多态通过分离<strong>做什么</strong>和<strong>怎么做</strong>。多态不但能过改善代码额组织结构和可读性，还能够创建<strong>可扩展</strong>的程序——无论什么时候，需要新功能的时候都能添加。多态的作用是消除<strong>类型</strong>的耦合关系（耦合：对象之间的依赖性，对象之间耦合度越高，维护成本越高。）<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://linnever.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://linnever.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Skills]]></title>
    <link href="http://linnever.github.io/2015/10/12/Skills/"/>
    <id>http://linnever.github.io/2015/10/12/Skills/</id>
    <published>2015-10-12T14:37:16.000Z</published>
    <updated>2015-10-12T18:06:19.703Z</updated>
    <content type="html"><![CDATA[<p><strong>How do I find where JDK is installed on my windows machine?</strong></p>
<p>If you are using Linux/Unix/Mac OS X:</p>
<p>Try this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> java</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>If you are using Windows:<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> java </span><br><span class="line">or C:&gt; <span class="keyword">for</span> <span class="decorator">%i</span> <span class="keyword">in</span> (javac.exe) do @echo.   %~<span class="variable">$PATH</span>:i</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong>how to compile servlets from commmand prompt</strong></p>
<p>Type the following command for the working directory:<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -classpath C:<span class="command">\apache</span>-tomcat-7.0.23<span class="command">\lib</span><span class="command">\servlet</span>-api.jar MyTestServlet.java</span><br></pre></td></tr></table></figure></p>
<p>if your environmental variable CLASSPATH contains libraries you need you might want to do:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -classpath %CLASSPATH%;C:\apache-tomcat-<span class="number">7.0</span><span class="number">.23</span>\lib\servlet-api.jar MyTestServlet.java</span><br></pre></td></tr></table></figure></p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>How do I find where JDK is installed on my windows machine?</strong></p>
<p>If you are using Linux/Unix/Mac OS X:</p>
<p>Try this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> java</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="JDK" scheme="http://linnever.github.io/tags/JDK/"/>
    
      <category term="JDK" scheme="http://linnever.github.io/categories/JDK/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JDK1.8.0_60---HashMap源码分析]]></title>
    <link href="http://linnever.github.io/2015/09/15/JDK1.8.0_60---HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://linnever.github.io/2015/09/15/JDK1.8.0_60---HashMap源码分析/</id>
    <published>2015-09-15T00:29:16.000Z</published>
    <updated>2015-09-15T15:22:58.552Z</updated>
    <content type="html"><![CDATA[<p>HashMap概述：</p>
<p>- </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HashMap概述：</p>
<p>- </p>
]]>
    </summary>
    
      <category term="JDK" scheme="http://linnever.github.io/tags/JDK/"/>
    
      <category term="JDK" scheme="http://linnever.github.io/categories/JDK/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JDK1.8.0_60---ArrayList源码分析]]></title>
    <link href="http://linnever.github.io/2015/09/13/JDK1.8.0_60---ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://linnever.github.io/2015/09/13/JDK1.8.0_60---ArrayList源码分析/</id>
    <published>2015-09-13T02:02:19.000Z</published>
    <updated>2015-09-13T03:10:20.718Z</updated>
    <content type="html"><![CDATA[<p>ArrayList概述</p>
<p>ArrayList是List接口的可变数组的实现。实现了所有可选列表操作，并允许包括 null 在内的所除了实现 List 接口外，此类还提供一些方法来操作内部用来存储列表的数组的大小。<br><a id="more"></a><br>每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。 </p>
<p>注意，此实现<strong>不是同步的</strong>。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。这通常是通过同步那些用来封装列表的对象来实现的。但如果没有这样的对象存在，则该列表需要运用{@link Collections#synchronizedList Collections.synchronizedList}来进行“包装”，该方法最好是在创建列表对象时完成，为了避免对列表进行突发的非同步操作。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> <span class="built_in">list</span> = Collections<span class="built_in">.</span>synchronizedList(<span class="literal">new</span> ArrayList(<span class="attribute">...</span>));</span><br></pre></td></tr></table></figure></p>
<p>建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。</p>
<h2 id="ArrayList源码解析">ArrayList源码解析</h2><h3 id="ArrayList类结构">ArrayList类结构</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过ArrayList实现的接口可知，其支持随机访问，能被克隆，支持序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189</span>L;</span><br><span class="line"></span><br><span class="line">　　<span class="comment">//默认初始容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被用于空实例的共享空数组实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被用于默认大小的空实例的共享数组实例。其与EMPTY_ELEMENTDATA的区别是：当我们向数组中添加第一个元素时，知道数组该扩充多少。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Object[]类型的数组，保存了添加到ArrayList中的元素。ArrayList的容量是该Object[]类型数组的长度</span><br><span class="line">     * 当第一个元素被添加时，任何空ArrayList中的elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA将会被</span><br><span class="line">     * 扩充到DEFAULT_CAPACITY（默认容量）。</span><br><span class="line">     */</span></span><br><span class="line">    transient Object[] elementData; <span class="comment">//非private是为了方便嵌套类的访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ArrayList的大小（指其所含的元素个数）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    ......  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayList包含了两个重要的对象：elementData 和 size。</p>
<ol>
<li><p>elementData 是”Object[] 类型的数组”，它保存了添加到ArrayList中的元素。实际上，elementData是个动态数组，我们能通过构造函数 ArrayList(int initialCapacity)来执行它的初始容量为initialCapacity；如果通过不含参数的构造函数ArrayList()来创建 ArrayList，则elementData的容量默认是10。elementData数组的大小会根据ArrayList容量的增长而动态的增长，具 体的增长方式，请参考源码分析中的ensureCapacity()函数。</p>
</li>
<li><p>size 则是动态数组的实际大小。</p>
</li>
</ol>
<h3 id="构造函数">构造函数</h3><p>ArrayList提供了三种方式的构造器，可以构造一个默认初始容量为10的空列表、构造一个指定初始容量的空列表以及构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回的顺序排列的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">   * 构造一个指定初始容量的空列表</span><br><span class="line">   * @param  initialCapacity  ArrayList的初始容量</span><br><span class="line">   * @throws IllegalArgumentException 如果给定的初始容量为负值</span><br><span class="line">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                             initialCapacity);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造一个默认初始容量为10的空列表</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * 构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回的顺序排列的</span><br><span class="line">   * @param c 包含用于去构造ArrayList的元素的collection</span><br><span class="line">   * @throws NullPointerException 如果指定的collection为空</span><br><span class="line">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">      elementData = c.toArray();</span><br><span class="line">      <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// c.toArray()可能不会正确地返回一个 Object[]数组，那么使用Arrays.copyOf()方法</span></span><br><span class="line">          <span class="keyword">if</span> (elementData.getClass() != Object[].<span class="keyword">class</span>)</span><br><span class="line">              <span class="comment">//Arrays.copyOf()返回一个 Object[].class类型的，大小为size，元素为elementData[0,...,size-1]</span></span><br><span class="line">              elementData = Arrays.copyOf(elementData, size, Object[].<span class="keyword">class</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// replace with empty array.</span></span><br><span class="line">          <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>此处重点说明一下，<font color="red"><strong>ArrayList是如何构造一个默认初始容量为10的空列表的？</strong></font><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造一个默认初始容量为10的空列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">　　<span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;  <span class="comment">//DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//而在在JDK1.6中，其构造函数为</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);  <span class="comment">//public ArrayList(int initialCapacity)中this.elementData = new Object[initialCapacity];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ArrayList构造一个默认初始容量为10的空列表：</p>
<ol>
<li><p>初始情况：elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}； size = 0;</p>
</li>
<li><p>当向数组中添加第一个元素时，通过add(E e)方法中调用的ensureCapacityInternal(size + 1)方法，即ensureCapacityInternal(1)；</p>
</li>
<li><p>在ensureCapacityInternal(int minCapacity)方法中，可得的minCapacity=DEFAULT_CAPACITY=10，然后再调用ensureExplicitCapacity(minCapacity)方法，即ensureExplicitCapacity(10)；</p>
</li>
<li><p>在ensureExplicitCapacity(minCapacity)方法中调用grow(minCapacity)方法，即grow(10)，此处为真正具体的数组扩容的算法，在此方法中，通过elementData = Arrays.copyOf(elementData, 10)具体实现了elementData数组初始容量为10的构造。</p>
</li>
</ol>
<h3 id="调整数组容量">调整数组容量</h3><p>从add()与addAll()方法中可以看出，每当向数组中添加元素时，都要去检查添加元素后的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容实质上是通过私有的方法ensureCapacityInternal(int minCapacity) -&gt; ensureExplicitCapacity(int minCapacity) -&gt; grow(int minCapacity)来实现的，但在jdk1.8中，向用户提供了一个public的方法ensureCapacity(int minCapacity)使用户可以手动的设置ArrayList实例的容量，以减少递增式再分配的数量。此处与jdk1.6中直接通过一个公开的方法ensureCapacity(int minCapacity)来实现数组容量的调整有区别。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * public方法，让用户能手动设置ArrayList的容量</span><br><span class="line">     * @param   minCapacity 期望的最小容量</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            <span class="comment">// any size if not default element table</span></span><br><span class="line">            ? <span class="number">0</span></span><br><span class="line">            <span class="comment">// larger than default for default empty table. It's already</span></span><br><span class="line">            <span class="comment">// supposed to be at default size.</span></span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当elementData为空时，ArrayList的初始容量最小为DEFAULT_CAPACITY（10）</span></span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组可被分配的最大容量；当需要的数组尺寸超过VM的限制时，可能导致OutOfMemoryError</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 增加数组的容量，确保它至少能容纳指定的最小容量的元素量</span><br><span class="line">     * @param minCapacity 期望的最小容量</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">//注意此处扩充capacity的方式是将其向右一位再加上原来的数，实际上是扩充了1.5倍</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) </span><br><span class="line">            newCapacity = hugeCapacity(minCapacity); <span class="comment">//设置数组可被分配的最大容量</span></span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>附：jdk1.6中ensureCapacity(int minCapacity)方法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确定ArrarList的容量。</span></span><br><span class="line"><span class="comment">// 若ArrayList的容量不足以容纳当前的全部元素，设置 新的容量=“(原始容量x3)/2 + 1”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;  <span class="comment">// 将“修改统计数”+1</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;</span><br><span class="line">            Object oldData[] = elementData;</span><br><span class="line">            <span class="keyword">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (newCapacity &lt; minCapacity)</span><br><span class="line">                newCapacity = minCapacity;</span><br><span class="line">            elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<font color="red"><strong>为什么ArrayList自动容量扩充选择扩充1.5倍？</strong></font>

<p>这种算法构造出来的新的数组长度的增量都会比上一次大( 而且是越来越大) ，即认为客户需要增加的数据很多，而避免频繁newInstance 的情况。</p>
<h3 id="添加元素">添加元素</h3><p>ArrayList提供了add(E e)、add(int index, E element)、addAll(Collection&lt;? extends E&gt; c)、addAll(int index, Collection&lt;? extends E&gt; c)这些添加元素的方法。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//将指定的元素(E e)添加到此列表的尾部</span><br><span class="line">    <span class="keyword">public</span> boolean add(E e) &#123;</span><br><span class="line">        ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  // Increments modCount<span class="comment">!!</span></span><br><span class="line">        elementData[<span class="built_in">size</span>++] = e;</span><br><span class="line">        <span class="keyword">return</span> true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //将指定的元素(E e)插入到列表的指定位置(<span class="built_in">index</span>)</span><br><span class="line">    <span class="keyword">public</span> void add(<span class="built_in">int</span> <span class="built_in">index</span>, E element) &#123;</span><br><span class="line">        rangeCheckForAdd(<span class="built_in">index</span>); //判断参数<span class="built_in">index</span>是否IndexOutOfBoundsException</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  // Increments modCount<span class="comment">!!  如果数组长度不足，将进行扩容</span></span><br><span class="line">        System.arraycopy(elementData, <span class="built_in">index</span>, elementData, <span class="built_in">index</span> + <span class="number">1</span>,</span><br><span class="line">                         <span class="built_in">size</span> - <span class="built_in">index</span>); //将源数组中从<span class="built_in">index</span>位置开始后的<span class="built_in">size</span>-<span class="built_in">index</span>个元素统一后移一位</span><br><span class="line">        elementData[<span class="built_in">index</span>] = element;</span><br><span class="line">        <span class="built_in">size</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 按照指定collection的迭代器所返回的元素顺序，将该collection中的所有元素添加到此列表的尾部</span><br><span class="line">     * @throws NullPointerException <span class="keyword">if</span> the specified collection is null</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">public</span> boolean addAll(Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="built_in">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(<span class="built_in">size</span> + numNew);  // Increments modCount</span><br><span class="line">        //将数组a[<span class="number">0</span>,...,numNew-<span class="number">1</span>]复制到数组elementData[<span class="built_in">size</span>,...,<span class="built_in">size</span>+numNew-<span class="number">1</span>]</span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, <span class="built_in">size</span>, numNew); </span><br><span class="line">        <span class="built_in">size</span> += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew <span class="comment">!= 0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从指定的位置开始，将指定collection中的所有元素插入到此列表中，新元素的顺序为指定collection的迭代器所返回的元素顺序</span><br><span class="line">     * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line">     * @throws NullPointerException <span class="keyword">if</span> the specified collection is null</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">public</span> boolean addAll(<span class="built_in">int</span> <span class="built_in">index</span>, Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;</span><br><span class="line">        rangeCheckForAdd(<span class="built_in">index</span>); //判断参数<span class="built_in">index</span>是否IndexOutOfBoundsException</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="built_in">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(<span class="built_in">size</span> + numNew);  // Increments modCount</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - <span class="built_in">index</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            //先将数组elementData[<span class="built_in">index</span>,...,<span class="built_in">index</span>+numMoved-<span class="number">1</span>]复制到elementData[<span class="built_in">index</span>+numMoved,...,<span class="built_in">index</span>+<span class="number">2</span>*numMoved-<span class="number">1</span>]</span><br><span class="line">            //即，将源数组中从<span class="built_in">index</span>位置开始的后numMoved个元素统一后移numNew位</span><br><span class="line">            System.arraycopy(elementData, <span class="built_in">index</span>, elementData, <span class="built_in">index</span> + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line">        //再将数组a[<span class="number">0</span>,...,numNew-<span class="number">1</span>]复制到数组elementData[<span class="built_in">index</span>,...,<span class="built_in">index</span>+numNew-<span class="number">1</span>]</span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, <span class="built_in">index</span>, numNew);</span><br><span class="line">        <span class="built_in">size</span> += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew <span class="comment">!= 0;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="删除元素">删除元素</h3><p>ArrayList提供了remove(int index)、remove(Object o)、clear()、removeRange(int fromIndex, int toIndex)、removeAll(Collection&lt;?&gt; c)、retainAll(Collection&lt;?&gt; c)这些删除元素的方法。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 移除此列表中指定位置上的元素</span><br><span class="line">     * @param index 需被移除的元素的索引</span><br><span class="line">     * @return the element 被移除的元素值</span><br><span class="line">     * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> E remove(<span class="built_in">int</span> index) &#123;</span><br><span class="line">        rangeCheck(index);  <span class="comment">//判断index是否 &lt;= size</span></span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        <span class="comment">//将数组elementData中index位置之后的所有元素向前移一位</span></span><br><span class="line">        <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--<span class="built_in">size</span>] = <span class="keyword">null</span>; <span class="comment">//将原数组最后一个位置置为null，由GC清理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除ArrayList中首次出现的指定元素(如果存在)，ArrayList中允许存放重复的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o) &#123;</span><br><span class="line">        <span class="comment">// 由于ArrayList中允许存放null，因此下面通过两种情况来分别处理。</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; <span class="built_in">size</span>; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index); <span class="comment">//私有的移除方法，跳过index参数的边界检查以及不返回任何值</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; <span class="built_in">size</span>; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的删除指定位置元素的方法，跳过index参数的边界检查以及不返回任何值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> fastRemove(<span class="built_in">int</span> index) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--<span class="built_in">size</span>] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空ArrayList，将全部的元素设为null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除ArrayList中从fromIndex（包含）到toIndex（不包含）之间所有的元素，共移除了toIndex-fromIndex个元素</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> removeRange(<span class="built_in">int</span> fromIndex, <span class="built_in">int</span> toIndex) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - toIndex;  <span class="comment">//需向前移动的元素的个数</span></span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="built_in">int</span> newSize = <span class="built_in">size</span> - (toIndex-fromIndex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = newSize; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">size</span> = newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除ArrayList中包含在指定容器c中的所有元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> removeAll(Collection&lt;?&gt; c) &#123;</span><br><span class="line">        Objects.requireNonNull(c);  <span class="comment">//检查指定的对象c是否为空</span></span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除ArrayList中不包含在指定容器c中的所有元素，与removeAll(Collection&lt;?&gt; c)正好相反</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> retainAll(Collection&lt;?&gt; c) &#123;</span><br><span class="line">        Objects.requireNonNull(c); </span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> batchRemove(Collection&lt;?&gt; c, <span class="built_in">boolean</span> complement) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">Object</span>[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="built_in">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;  <span class="comment">//读写双指针</span></span><br><span class="line">        <span class="built_in">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; r &lt; <span class="built_in">size</span>; r++)</span><br><span class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement) <span class="comment">//判断指定容器c中是否含有elementData[r]元素</span></span><br><span class="line">                    elementData[w++] = elementData[r];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">            <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">            <span class="keyword">if</span> (r != <span class="built_in">size</span>) &#123;</span><br><span class="line">                System.arraycopy(elementData, r,</span><br><span class="line">                                 elementData, w,</span><br><span class="line">                                 <span class="built_in">size</span> - r);</span><br><span class="line">                w += <span class="built_in">size</span> - r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (w != <span class="built_in">size</span>) &#123;</span><br><span class="line">                <span class="comment">// clear to let GC do its work</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = w; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">                    elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">                modCount += <span class="built_in">size</span> - w;</span><br><span class="line">                <span class="built_in">size</span> = w;</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="修改元素">修改元素</h3><p>ArrayList提供了set(int index, E element)方法来修改指定索引上的值。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将指定索引上的值替换为新值，并返回旧值</span></span><br><span class="line"><span class="keyword">public</span> E set(<span class="keyword">int</span> <span class="keyword">index</span>, E element) &#123;</span><br><span class="line">    rangeCheck(<span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">    E oldValue = elementData(<span class="keyword">index</span>);</span><br><span class="line">    elementData[<span class="keyword">index</span>] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="查找元素">查找元素</h3><p>ArrayList提供了get(int index)、contains(Object o)、indexOf(Object o)、lastIndexOf(Object o)、get(int index)这些查找元素的方法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断ArrayList中是否包含Object(o)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正向查找，返回ArrayList中元素Object o第一次出现的位置，如果元素不存在，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == null) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)                 </span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==null)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逆向查找，返回ArrayList中元素Object o最后一次出现的位置，如果元素不存在，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == null) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==null)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回指定索引处的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elementData(index); <span class="comment">//实质上return (E) elementData[index]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="其他public方法">其他public方法</h3><p>trimToSize()、size()、isEmpty()、clone()、toArray()、toArray(T[] a)<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将底层数组的容量调整为当前列表保存的实际元素的大小的功能</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> trimToSize() &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span> &lt; elementData.length) &#123;</span><br><span class="line">            elementData = (<span class="built_in">size</span> == <span class="number">0</span>)</span><br><span class="line">              ? EMPTY_ELEMENTDATA</span><br><span class="line">              : Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回ArrayList的大小（元素个数）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//判断ArrayList是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">size</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回此 ArrayList实例的浅拷贝</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> clone() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">            v.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回一个包含ArrayList中所有元素的数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span>[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果给定的参数数组长度足够，则将ArrayList中所有元素按序存放于参数数组中，并返回</span></span><br><span class="line">    <span class="comment">//如果给定的参数数组长度小于ArrayList的长度，则返回一个新分配的、长度等于ArrayList长度的、包含ArrayList中所有元素的新数组</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; <span class="built_in">size</span>)</span><br><span class="line">            <span class="comment">// Make a new array of a's runtime type, but my contents:</span></span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, <span class="built_in">size</span>, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, <span class="built_in">size</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; <span class="built_in">size</span>)</span><br><span class="line">            a[<span class="built_in">size</span>] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>支持序列化的写入函数writeObject(java.io.ObjectOutputStream s)和读取函数readObject(java.io.ObjectInputStream s)<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/序列化：将ArrayList的“大小，所有的元素值”都写入到输出流中</span><br><span class="line">    <span class="keyword">private</span> void writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">        throws java.io.IOException&#123;</span><br><span class="line">        // <span class="built_in">Write</span> <span class="type">out</span> element <span class="built_in">count</span>, and <span class="built_in">any</span> hidden stuff</span><br><span class="line">        <span class="built_in">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        // <span class="built_in">Write</span> <span class="type">out</span> <span class="built_in">size</span> as capacity for behavioural compatibility with clone()</span><br><span class="line">        s.writeInt(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">        // <span class="built_in">Write</span> <span class="type">out</span> <span class="built_in">all</span> elements <span class="type">in</span> the proper order.</span><br><span class="line">        for (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount <span class="comment">!= expectedModCount) &#123;</span></span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //反序列化：先将ArrayList的“大小”读出，然后将“所有的元素值”读出</span><br><span class="line">    <span class="keyword">private</span> void readObject(java.io.ObjectInputStream s)</span><br><span class="line">        throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">        // Read <span class="type">in</span> <span class="built_in">size</span>, and <span class="built_in">any</span> hidden stuff</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        // Read <span class="type">in</span> capacity</span><br><span class="line">        s.readInt(); // ignored</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            // be like clone(), <span class="built_in">allocate</span> array based upon <span class="built_in">size</span> not capacity</span><br><span class="line">            ensureCapacityInternal(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            // Read <span class="type">in</span> <span class="built_in">all</span> elements <span class="type">in</span> the proper order.</span><br><span class="line">            for (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>关于Java的序列化与反序列化可以参考：<a href="http://www.cnblogs.com/CherishFX/p/4634407.html" target="_blank" rel="external">Java对象的序列化和反序列化</a></p>
<h2 id="感谢">感谢</h2><p><a href="http://www.cnblogs.com/CherishFX/p/4725394.html" target="_blank" rel="external">CherishFX’s blog</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ArrayList概述</p>
<p>ArrayList是List接口的可变数组的实现。实现了所有可选列表操作，并允许包括 null 在内的所除了实现 List 接口外，此类还提供一些方法来操作内部用来存储列表的数组的大小。<br>]]>
    
    </summary>
    
      <category term="JDK" scheme="http://linnever.github.io/tags/JDK/"/>
    
      <category term="JDK" scheme="http://linnever.github.io/categories/JDK/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java关键字transient]]></title>
    <link href="http://linnever.github.io/2015/09/11/Java%E5%85%B3%E9%94%AE%E5%AD%97transient/"/>
    <id>http://linnever.github.io/2015/09/11/Java关键字transient/</id>
    <published>2015-09-11T02:47:59.000Z</published>
    <updated>2015-09-13T03:10:36.567Z</updated>
    <content type="html"><![CDATA[<p>treansient的作用及使用方法</p>
<p>我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。<br><a id="more"></a><br>然而在实际开发过程中，我们常常会遇到这样的问题，这个类的有些属性需要序列化，而其他属性不需要被序列化，打个比方，如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p>
<p>总之，java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。</p>
<h2 id="Java对象序列化">Java对象序列化</h2><p>参考<a href="http://www.jianshu.com/p/56671a839f9c" target="_blank" rel="external">Java对象序列化</a></p>
<h2 id="Java对象的序列化和反序列化">Java对象的序列化和反序列化</h2><p>参考<a href="http://www.cnblogs.com/CherishFX/p/4634407.html" target="_blank" rel="external">Java对象的序列化和反序列化</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>treansient的作用及使用方法</p>
<p>我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://linnever.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://linnever.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JDK1.8.0_60---LinkedList源码分析]]></title>
    <link href="http://linnever.github.io/2015/09/10/JDK1.8.0_60---LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://linnever.github.io/2015/09/10/JDK1.8.0_60---LinkedList源码分析/</id>
    <published>2015-09-10T14:46:00.000Z</published>
    <updated>2015-09-13T03:10:47.313Z</updated>
    <content type="html"><![CDATA[<p>LinkedList概述</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>LinkedList是List和Deque接口的双向链表的实现。实现了所有可选列表操作，并允许包括null值。<br>LinkedList既然是通过双向链表去实现的，那么它可以被当作堆栈、队列或双端队列进行操作。并且其顺序访问非常高效，而随机访问效率比较低。<br>注意，<font color="red"><strong>此实现不是同步的</strong></font>。</p>
<h2 id="LinkedList源码解析">LinkedList源码解析</h2><h3 id="节点Node数据结构">节点Node数据结构</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Node&lt;E&gt; &#123;</span><br><span class="line">        E item;    <span class="comment">// 当前节点所包含的值</span></span><br><span class="line">        Node&lt;E&gt; <span class="keyword">next</span>;   <span class="comment">//下一个节点</span></span><br><span class="line">        Node&lt;E&gt; prev;    <span class="comment">//上一个节点</span></span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; <span class="keyword">next</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="LinkedList类结构">LinkedList类结构</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/通过LinkedList实现的接口可知，其支持队列操作，双向列表操作，能被克隆，支持序列化</span><br><span class="line">public class LinkedList<span class="variable">&lt;E&gt;</span></span><br><span class="line">    extends AbstractSequentialList<span class="variable">&lt;E&gt;</span></span><br><span class="line">    implements List<span class="variable">&lt;E&gt;</span>, Deque<span class="variable">&lt;E&gt;</span>, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    // LinkedList的大小（指其所含的元素个数）</span><br><span class="line">    transient int size = 0;</span><br><span class="line"></span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> 指向第一个节点</span><br><span class="line">     <span class="keyword">*</span> 不变的: (first == null &amp;&amp; last == null) ||</span><br><span class="line">     <span class="keyword">*</span>            (first.prev == null &amp;&amp; first.item != null)</span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    transient Node<span class="variable">&lt;E&gt;</span> first;</span><br><span class="line"></span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> 指向最后一个节点</span><br><span class="line">     <span class="keyword">*</span> 不变的: (first == null &amp;&amp; last == null) ||</span><br><span class="line">     <span class="keyword">*</span>            (last.next == null &amp;&amp; last.item != null)</span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    transient Node<span class="variable">&lt;E&gt;</span> last;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#659EC7"><strong>LinkedList包含了三个重要的对象：first、last 和 size</strong></font>:</p>
<ul>
<li>first 是双向链表的表头，它是双向链表节点所对应的类Node的实例</li>
<li>last 是双向链表的最后一个元素，它是双向链表节点所对应的类Node的实例</li>
<li>size 是双向链表中节点的个数。</li>
</ul>
<h3 id="构造函数">构造函数</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建一个空列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回的顺序排列的</span><br><span class="line"> * <span class="doctag">@param</span>  c 包含用于去构造LinkedList的元素的collection</span><br><span class="line"> * <span class="doctag">@throws</span> NullPointerException 如果指定的collection为空</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">//构建一个包含指定集合c的列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? <span class="keyword">extends</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="添加元素">添加元素</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头插入，在列表首部插入节点值e</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       linkFirst(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//头插入，即将节点值为e的节点设置为链表首节点</span></span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="comment">//构建一个prev值为null,节点值为e,next值为f的新节点newNode</span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f); </span><br><span class="line">       <span class="comment">//将newNode作为首节点</span></span><br><span class="line">       first = newNode;</span><br><span class="line">       <span class="comment">//如果原首节点为null，即原链表为null，则链表尾节点也设置为newNode</span></span><br><span class="line">       <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">           last = newNode; </span><br><span class="line">       <span class="keyword">else</span> <span class="comment">//否则，原首节点的prev设置为newNode</span></span><br><span class="line">           f.prev = newNode;</span><br><span class="line">       size++;  </span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//尾插入，在列表尾部插入节点值e，该方法等价于add()</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       linkLast(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//尾插入，在列表尾部插入节点值e</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       linkLast(e);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;    </span><br><span class="line"></span><br><span class="line">   <span class="comment">//尾插入，即将节点值为e的节点设置为链表的尾节点</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="comment">//构建一个prev值为l,节点值为e,next值为null的新节点newNode</span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">       <span class="comment">//将newNode作为尾节点</span></span><br><span class="line">       last = newNode;</span><br><span class="line">       <span class="comment">//如果原尾节点为null，即原链表为null，则链表首节点也设置为newNode</span></span><br><span class="line">       <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">           first = newNode; </span><br><span class="line">       <span class="keyword">else</span>  <span class="comment">//否则，原尾节点的next设置为newNode</span></span><br><span class="line">           l.next = newNode;</span><br><span class="line">       size++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//中间插入，在非空节点succ之前插入节点值e</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// assert succ != null;</span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">       <span class="comment">//构建一个prev值为succ.prev,节点值为e,next值为succ的新节点newNode</span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">       <span class="comment">//设置newNode为succ的前节点</span></span><br><span class="line">       succ.prev = newNode;</span><br><span class="line">       <span class="comment">//如果succ.prev为null，即如果succ为首节点，则将newNode设置为首节点</span></span><br><span class="line">       <span class="keyword">if</span> (pred == <span class="keyword">null</span>)  </span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span> <span class="comment">//如果succ不是首节点</span></span><br><span class="line">           pred.next = newNode;</span><br><span class="line">       size++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span><br><span class="line">    * 按照指定collection的迭代器所返回的元素顺序，将该collection中的所有元素添加到此链表的尾部</span><br><span class="line">    * 如果指定的集合添加到链表的尾部的过程中，集合被修改，则该插入过程的后果是不确定的。</span><br><span class="line">    * 一般这种情况发生在指定的集合为该链表的一部分，且其非空。</span><br><span class="line">    * <span class="doctag">@throws</span> NullPointerException 指定集合为null</span><br><span class="line">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? <span class="keyword">extends</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">return</span> <span class="title">addAll</span><span class="params">(size, c)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//从指定的位置开始，将指定collection中的所有元素插入到此链表中，新元素的顺序为指定collection的迭代器所返回的元素顺序</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? <span class="keyword">extends</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">       checkPositionIndex(index); <span class="comment">//index &gt;= 0 &amp;&amp; index &lt;= size</span></span><br><span class="line"></span><br><span class="line">       Object[] a = c.toArray();</span><br><span class="line">       <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">       <span class="keyword">if</span> (numNew == <span class="number">0</span>) </span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       Node&lt;E&gt; pred, succ; <span class="comment">//succ指向当前需要插入节点的位置，pred指向其前一个节点</span></span><br><span class="line">       <span class="keyword">if</span> (index == size) &#123; <span class="comment">//说明在列表尾部插入集合元素</span></span><br><span class="line">           succ = <span class="keyword">null</span>;</span><br><span class="line">           pred = last;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           succ = node(index); <span class="comment">//得到索引index所对应的节点</span></span><br><span class="line">           pred = succ.prev;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//指定collection中的所有元素依次插入到此链表中指定位置的过程</span></span><br><span class="line">       <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">           <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</span><br><span class="line">           <span class="comment">//将元素值e，前继节点pred“封装”为一个新节点newNode</span></span><br><span class="line">           Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">if</span> (pred == <span class="keyword">null</span>)  <span class="comment">//如果原链表为null，则新插入的节点作为链表首节点</span></span><br><span class="line">               first = newNode; </span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               pred.next = newNode;</span><br><span class="line">           pred = newNode;  <span class="comment">//pred指针向后移动，指向下一个需插入节点位置的前一个节点</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//集合元素插入完成后，与原链表index位置后面的子链表链接起来</span></span><br><span class="line">       <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123; <span class="comment">//说明之前是在列表尾部插入的集合元素</span></span><br><span class="line">           last = pred;  <span class="comment">//pred指向的是最后插入的那个节点</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">           pred.next = succ;</span><br><span class="line">           succ.prev = pred;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       size += numNew;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将指定的元素(E element)插入到列表的指定位置(index)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       checkPositionIndex(index); <span class="comment">//index &gt;= 0 &amp;&amp; index &lt;= size</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (index == size) </span><br><span class="line">           linkLast(element); <span class="comment">//尾插入</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           linkBefore(element, node(index));  <span class="comment">//中间插入</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除元素">删除元素</h3><p>LinkedList提供了<strong>头删除</strong>removeFirst()、<strong>尾删除</strong>removeLast()、remove(int index)、remove(Object o)、clear()这些删除元素的方法。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移除首节点，并返回该节点的元素值</span></span><br><span class="line">    <span class="keyword">public</span> E removeFirst() &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除非空的首节点f</span></span><br><span class="line">    <span class="keyword">private</span> E unlinkFirst(Node&lt;E&gt; f) &#123;</span><br><span class="line">        <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">        <span class="keyword">final</span> E element = f.item;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; <span class="keyword">next</span> = f.<span class="keyword">next</span>;</span><br><span class="line">        f.item = <span class="keyword">null</span>;</span><br><span class="line">        f.<span class="keyword">next</span> = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">        first = <span class="keyword">next</span>; <span class="comment">//将原首节点的next节点设置为首节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">next</span> == <span class="keyword">null</span>)  <span class="comment">//如果原链表只有一个节点，即原首节点，删除后，链表为null</span></span><br><span class="line">            last = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            <span class="keyword">next</span>.prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">size</span>--;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除尾节点，并返回该节点的元素值</span></span><br><span class="line">    <span class="keyword">public</span> E removeLast() &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除非空的尾节点l</span></span><br><span class="line">    <span class="keyword">private</span> E unlinkLast(Node&lt;E&gt; l) &#123;</span><br><span class="line">        <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">        <span class="keyword">final</span> E element = l.item;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</span><br><span class="line">        l.item = <span class="keyword">null</span>;</span><br><span class="line">        l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">        last = prev; <span class="comment">//将原尾节点的prev节点设置为尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) <span class="comment">//如果原链表只有一个节点,则删除后，链表为null</span></span><br><span class="line">            first = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">size</span>--;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除此列表中指定位置上的元素</span></span><br><span class="line">    <span class="keyword">public</span> E remove(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        checkElementIndex(index);  <span class="comment">//index &gt;= 0 &amp;&amp; index &lt; size</span></span><br><span class="line">        <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除非空节点x</span></span><br><span class="line">    E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">        <span class="comment">// assert x != null;</span></span><br><span class="line">        <span class="keyword">final</span> E element = x.item;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; <span class="keyword">next</span> = x.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;  <span class="comment">//如果被删除节点为头节点</span></span><br><span class="line">            first = <span class="keyword">next</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">            x.prev = <span class="keyword">null</span>; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;  <span class="comment">//如果被删除节点为尾节点</span></span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">next</span>.prev = prev;</span><br><span class="line">            x.<span class="keyword">next</span> = <span class="keyword">null</span>; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x.item = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">        <span class="keyword">size</span>--;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除列表中首次出现的指定元素(如果存在)，LinkedList中允许存放重复的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) &#123;</span><br><span class="line">        <span class="comment">//由于LinkedList中允许存放null，因此下面通过两种情况来分别处理</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>) &#123; <span class="comment">//顺序访问</span></span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除列表中所有节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> clear() &#123;</span><br><span class="line">        <span class="comment">// Clearing all of the links between nodes is "unnecessary", but:</span></span><br><span class="line">        <span class="comment">// - helps a generational GC if the discarded nodes inhabit</span></span><br><span class="line">        <span class="comment">//   more than one generation</span></span><br><span class="line">        <span class="comment">// - is sure to free memory even if there is a reachable Iterator</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            Node&lt;E&gt; <span class="keyword">next</span> = x.<span class="keyword">next</span>;</span><br><span class="line">            x.item = <span class="keyword">null</span>;</span><br><span class="line">            x.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">            x = <span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        first = last = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">size</span> = <span class="number">0</span>;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="修改元素">修改元素</h3><p>LinkedList提供了set(int index, E element)方法来修改指定索引上的值。</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//替换指定索引位置节点的元素值，并返回旧值</span><br><span class="line"><span class="keyword">public</span> E set(<span class="built_in">int</span> <span class="built_in">index</span>, E element) &#123;</span><br><span class="line">    checkElementIndex(<span class="built_in">index</span>); //<span class="built_in">index</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">index</span> &lt; <span class="built_in">size</span></span><br><span class="line">    Node&lt;E&gt; x = node(<span class="built_in">index</span>);</span><br><span class="line">    E oldVal = x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    <span class="keyword">return</span> oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查找元素">查找元素</h3><p>LinkedList提供了getFirst()、getLast()、contains(Object o)、get(int index)、indexOf(Object o)、lastIndexOf(Object o)这些查找元素的方法。</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回列表首节点元素值</span></span><br><span class="line">    <span class="keyword">public</span> E getFirst() &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>)  <span class="comment">//如果首节点为null</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> f.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回列表尾节点元素值</span></span><br><span class="line">    <span class="keyword">public</span> E getLast() &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>) <span class="comment">//如果尾节点为null</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> l.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断列表中是否包含有元素值o，返回true当列表中至少存在一个元素值e，使得(o==null?e==null:o.equals(e))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> contains(Object o) &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回指定索引处的元素值</span></span><br><span class="line">    <span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">        checkElementIndex(<span class="keyword">index</span>); <span class="comment">//index &gt;= 0 &amp;&amp; index &lt; size</span></span><br><span class="line">        <span class="keyword">return</span> node(<span class="keyword">index</span>).item;  <span class="comment">//node(index)返回指定索引位置index处的节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回指定索引位置的节点</span></span><br><span class="line">    Node&lt;E&gt; node(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">        <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line">        <span class="comment">//折半思想，当index &lt; size/2时，从列表首节点向后查找</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">index</span> &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">index</span>; i++)</span><br><span class="line">                x = x.next;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">//当index &gt;= size/2时，从列表尾节点向前查找</span></span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; <span class="keyword">index</span>; i--)</span><br><span class="line">                x = x.prev;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正向查找，返回LinkedList中元素值Object o第一次出现的位置，如果元素不存在，则返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> indexOf(Object o) &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//由于LinkedList中允许存放null，因此下面通过两种情况来分别处理</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123; <span class="comment">//顺序向后</span></span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">index</span>;</span><br><span class="line">                <span class="keyword">index</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">index</span>;</span><br><span class="line">                <span class="keyword">index</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逆向查找，返回LinkedList中元素值Object o最后一次出现的位置，如果元素不存在，则返回-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> lastIndexOf(Object o) &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">index</span> = size;</span><br><span class="line">        <span class="comment">//由于LinkedList中允许存放null，因此下面通过两种情况来分别处理</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;  <span class="comment">//逆向向前</span></span><br><span class="line">                <span class="keyword">index</span>--;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">index</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                <span class="keyword">index</span>--;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">index</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>由LinkedList的类结构可以看出，LinkedList是AbstractSequentialList的子类。AbstractSequentialList 实现了get(int index)、set(int index, E element)、add(int index, E element) 和 remove(int index)这些随机访问的函数，那么<strong>LinkedList也实现了这些随机访问的接口。LinkedList具体是如何实现随机访问的？即，具体是如何定义index这个参数的</strong></p>
<p>在源码中，Node<e> node(int index)方法是得到索引index所指向的Node节点的。具体实现为：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//返回指定索引位置的节点</span><br><span class="line">Node&lt;E&gt; node(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">    // assert isElementIndex(<span class="built_in">index</span>);</span><br><span class="line">    //折半思想，当<span class="built_in">index</span> &lt; <span class="built_in">size</span>/<span class="number">2</span>时，从列表首节点向后查找</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">index</span> &lt; (<span class="built_in">size</span> &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">index</span>; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  //当<span class="built_in">index</span> &gt;= <span class="built_in">size</span>/<span class="number">2</span>时，从列表尾节点向前查找</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="built_in">size</span> - <span class="number">1</span>; i &gt; <span class="built_in">index</span>; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></e></p>
<p>该方法返回双向链表中指定位置处的节点，而链表中是没有下标索引的，要指定位置出的元素，就要遍历该链表，从源码的实现中，我们看到这里有一个加速动作。 源码中先将index与长度size的一半比较，如果index<size 2，就只从位置0往后遍历到位置index处，而如果="" index="">size/2，就只从位置size往前遍历到位置index处。这样可以减少一部分不必要的遍历。</size></p>
<h3 id="其他public方法">其他public方法</h3><p>clone()、 toArray() 、toArray(T[] a)<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//返回此 <span class="type">LinkedList</span>实例的浅拷贝</span><br><span class="line">    public <span class="type">Object</span> clone() &#123;</span><br><span class="line">        <span class="type">LinkedList</span>&lt;E&gt; clone = superClone();</span><br><span class="line"></span><br><span class="line">        // <span class="type">Put</span> clone into <span class="string">"virgin"</span> state</span><br><span class="line">        clone.first = clone.last = null;</span><br><span class="line">        clone.size = <span class="number">0</span>;</span><br><span class="line">        clone.modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        // <span class="type">Initialize</span> clone <span class="keyword">with</span> our elements</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span>&lt;E&gt; x = first; x != null; x = x.next)</span><br><span class="line">            clone.add(x.item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //返回一个包含<span class="type">LinkedList</span>中所有元素值的数组</span><br><span class="line">    public <span class="type">Object</span>[] toArray() &#123;</span><br><span class="line">        <span class="type">Object</span>[] <span class="literal">result</span> = new <span class="type">Object</span>[size];</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span>&lt;E&gt; x = first; x != null; x = x.next)</span><br><span class="line">            <span class="literal">result</span>[i++] = x.item;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //如果给定的参数数组长度足够，则将<span class="type">ArrayList</span>中所有元素按序存放于参数数组中，并返回</span><br><span class="line">    //如果给定的参数数组长度小于<span class="type">LinkedList</span>的长度，则返回一个新分配的、长度等于<span class="type">LinkedList</span>长度的、包含<span class="type">LinkedList</span>中所有元素的新数组</span><br><span class="line">    @<span class="type">SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            a = (T[])java.lang.reflect.<span class="type">Array</span>.newInstance(</span><br><span class="line">                                a.getClass().getComponentType(), size);</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">Object</span>[] <span class="literal">result</span> = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span>&lt;E&gt; x = first; x != null; x = x.next)</span><br><span class="line">            <span class="literal">result</span>[i++] = x.item;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>支持序列化的写入函数writeObject(java.io.ObjectOutputStream s)和读取函数readObject(java.io.ObjectInputStream s)<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">876323262645176354</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化：将linkedList的“大小，所有的元素值”都写入到输出流中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">        <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size</span></span><br><span class="line">        s.writeInt(<span class="keyword">size</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>)</span><br><span class="line">            s.writeObject(x.item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化：先将LinkedList的“大小”读出，然后将“所有的元素值”读出</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size</span></span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">size</span> = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">size</span>; i++)</span><br><span class="line">            linkLast((E)s.readObject());  <span class="comment">//以尾插入的方式</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Queue操作">Queue操作</h3><p>Queue操作提供了peek()、element()、poll()、remove()、offer(E e)这些方法。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取但不移除此队列的头；如果此队列为空，则返回 null</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function">E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取但不移除此队列的头；如果此队列为空，则抛出NoSuchElementException异常</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function">E <span class="title">element</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">return</span> <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取并移除此队列的头，如果此队列为空，则返回 null</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function">E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取并移除此队列的头，如果此队列为空，则抛出NoSuchElementException异常</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function">E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">return</span> <span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将指定的元素值(E e)插入此列表末尾</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">return</span> <span class="title">add</span><span class="params">(e)</span></span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Deque（双端队列）操作">Deque（双端队列）操作</h3><p>Deque操作提供了offerFirst(E e)、offerLast(E e)、peekFirst()、peekLast()、pollFirst()、pollLast()、push(E e)、pop()、removeFirstOccurrence(Object o)、removeLastOccurrence(Object o)这些方法。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取但不移除此队列的头；如果此队列为空，则返回 null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取但不移除此队列的头；如果此队列为空，则抛出NoSuchElementException异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">element</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取并移除此队列的头，如果此队列为空，则返回 null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取并移除此队列的头，如果此队列为空，则抛出NoSuchElementException异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将指定的元素值(E e)插入此列表末尾</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">add</span><span class="params">(e)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deque operations</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将指定的元素插入此双端队列的开头</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将指定的元素插入此双端队列的末尾</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取，但不移除此双端队列的第一个元素；如果此双端队列为空，则返回 null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取，但不移除此双端队列的最后一个元素；如果此双端队列为空，则返回 null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : l.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取并移除此双端队列的第一个元素；如果此双端队列为空，则返回 null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取并移除此双端队列的最后一个元素；如果此双端队列为空，则返回 null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkLast(l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将一个元素推入此双端队列所表示的堆栈（换句话说，此双端队列的头部）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从此双端队列所表示的堆栈中弹出一个元素（换句话说，移除并返回此双端队列的头部）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">removeFirst</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从此双端队列移除第一次出现的指定元素，如果列表中不包含次元素，则没有任何改变</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">remove</span><span class="params">(o)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从此双端队列移除最后一次出现的指定元素,如果列表中不包含次元素，则没有任何改变</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//由于LinkedList中允许存放null，因此下面通过两种情况来分别处理</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123; <span class="comment">//逆向向前</span></span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Fail-Fast机制">Fail-Fast机制</h3><p>LinkedList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p>
<h2 id="常用的LinkedList的遍历方式">常用的LinkedList的遍历方式</h2><p>LinkedList不提倡运用随机访问的方式进行元素遍历。</p>
<ul>
<li><p>通过迭代器Iterator遍历：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> iter = list.<span class="keyword">iterator</span>();</span><br><span class="line">  <span class="keyword">while</span> (iter.hasNext())</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">System</span>.<span class="keyword">out</span>.println(iter.next());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过迭代器ListIterator遍历：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ListIterator&lt;String&gt; lIter = list.listIterator<span class="params">()</span>;</span><br><span class="line">　　<span class="comment">//顺向遍历</span></span><br><span class="line">　　while<span class="params">(lIter.hasNext<span class="params">()</span>)</span>&#123;</span><br><span class="line">    　　System.out.println<span class="params">(lIter.next<span class="params">()</span>)</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="comment">//逆向遍历</span></span><br><span class="line">　　while<span class="params">(lIter.hasPrevious<span class="params">()</span>)</span>&#123;</span><br><span class="line">    　　System.out.println<span class="params">(lIter.previous<span class="params">()</span>)</span>;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>foreach循环遍历</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">String</span> <span class="built_in">str</span>:list)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="感谢：">感谢：</h2><p><a href="http://www.cnblogs.com/CherishFX/p/4734490.html" target="_blank" rel="external">jdk1.8.0_45源码解读——LinkedList的实现</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>LinkedList概述</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="JDK" scheme="http://linnever.github.io/tags/JDK/"/>
    
      <category term="JDK" scheme="http://linnever.github.io/categories/JDK/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown技巧]]></title>
    <link href="http://linnever.github.io/2015/09/10/Markdown%E6%8A%80%E5%B7%A7/"/>
    <id>http://linnever.github.io/2015/09/10/Markdown技巧/</id>
    <published>2015-09-10T14:39:53.000Z</published>
    <updated>2015-09-13T03:11:24.574Z</updated>
    <content type="html"><![CDATA[<p>如何给Markdown字体添加颜色<br><a id="more"></a></p>
<p>形如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="attribute">font</span> <span class="attribute">color</span>=<span class="string">"red"</span>&gt;要变红的文字&lt;/<span class="attribute">font</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<font color="red">要变红的文字</font>]]></content>
    <summary type="html">
    <![CDATA[<p>如何给Markdown字体添加颜色<br>]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://linnever.github.io/tags/Markdown/"/>
    
      <category term="Markdown" scheme="http://linnever.github.io/categories/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Softwares]]></title>
    <link href="http://linnever.github.io/2015/08/19/Softwares/"/>
    <id>http://linnever.github.io/2015/08/19/Softwares/</id>
    <published>2015-08-19T08:12:53.000Z</published>
    <updated>2015-09-13T03:11:43.485Z</updated>
    <content type="html"><![CDATA[<p>良心-软件大杂烩 </p>
<h3 id="Windows篇">Windows篇</h3><ol>
<li><p><strong>Everything</strong>: 首推！！介于Windows自带的文件搜索功能弱爆了(目测是根据类似以路径为节点的二叉树),<strong>everything</strong> 搜索根据你输入的文件名，快速定位(目测是根据字母为节点的二叉树【不全是】)。总的来说:对于经常要不知道文件放哪的用户，但是希望很快来找到文件的，必备！快的超乎你的想象！！</p>
<a id="more"></a>
</li>
<li><p><strong>Markdownpad2</strong>: 支持markdown语法的编辑器很多.这款比较良心，虽然高级功能需要付款。付款的软件一般都不会太差。国产的cmd Markdown 也不错。但是我用的感觉奇怪。更新之后不知道怎么样。可以试试。(<strong>tips</strong>: Windows10 安装需要安装一下插件,否则预览会崩溃的)</p>
</li>
<li><p><strong>PicPick</strong> : 截图软件。如果你不喜欢qq(比如我)，电脑自带的截图软件没有热键，怎么会好用呢？改款各种截图方式都用（滚动截图我还没学会）。各种方式截图，自定义设定热键。好用到爆，各种格式输出。</p>
</li>
<li><p><strong>f.lux</strong> :经常对着电脑，保护眼睛很重要。虽然色调调的有些角度会有屎黄色（一定是我的屏幕不好），但是习惯后，夜晚的暖色调绝对比之前普通模式好太多太多。它是自动变得，完全不用管它，只要你不要开机启动禁止掉就行，这么小的软件不会影响你的开机速度（反正我是秒开）。</p>
</li>
<li><p>（硬件）<strong>SSD</strong> :<strong>没有好的硬件怎么体验好的软件服务</strong>。有钱就就上ssd,别买64g，那么小的。为什么苹果体验那么好，有些人都说Windows怎么怎么样。大多数Windows 都还在使用机器硬盘，为什么卡（涉及太多：你操作不当，硬盘瓶颈，不良商家软件，各种服务强制开）苹果电脑全线产品都是ssd. 感谢我悦给我推荐使用ssd,瞬间我就再也不想回到过去了（周董强行插入）最小推荐256g的，用的快感只有用过的人才懂！</p>
</li>
</ol>
<h3 id="chrome_插件篇">chrome 插件篇</h3><ol>
<li><p><strong>Evernote 插件和Pocket 插件</strong>： 大同小异，快速截取网页内容，保存到软件云空间中，放便。</p>
</li>
<li><p><strong>Google Dictionary</strong> :如果你想体验苹果的三指取词，这款绝对好用，不过只能在chrome浏览器内，对于阅读英文的同学，双击不认识的单词就能显示中文或英文解释，快捷方式自己设置哦！ @@@“完美”@@@  </p>
</li>
<li><p><strong>去广告的插件</strong> :我就不推荐了，万能的淘宝几毛就能买了会员，能看好久呢。还是推荐下，虽然对国内视频已经没有什么用了，但是对其他挂件广告还是很用的。adkill and meida 和adblock plus</p>
</li>
<li><p><strong>美化</strong> ： 新建标签页就空白的页面是不是不好看呢。好想每天一打开chrome每天都有不一样的图片那多好啊。<strong>Momentum</strong>来满足你，图片来源500px高质量图片网站。其他小细节也很棒。</p>
</li>
<li><p><strong>vpn</strong>  :goagent不像以前那么好用了。还是付费吧。具体不推荐(防止又被禁)</p>
</li>
</ol>
<p>插件不宜太多，适度就好不然如果你电脑配置不好，还用机械硬盘，内存不够，就有你好受的啦。Windows10的新浏览Edge速度快，占用内存比chrome小太多太多.仅仅是打开浏览器chrome占用内存是Edge的将近<strong>5倍</strong>，但是Edge真的是太简洁了，轻量级的，速度快。据说微软要把Edge无缝接受chrome的插件，那就太美好了。</p>
<h3 id="OSX_篇">OSX 篇</h3><p>还没用过，叫基友来写吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>良心-软件大杂烩 </p>
<h3 id="Windows篇">Windows篇</h3><ol>
<li><p><strong>Everything</strong>: 首推！！介于Windows自带的文件搜索功能弱爆了(目测是根据类似以路径为节点的二叉树),<strong>everything</strong> 搜索根据你输入的文件名，快速定位(目测是根据字母为节点的二叉树【不全是】)。总的来说:对于经常要不知道文件放哪的用户，但是希望很快来找到文件的，必备！快的超乎你的想象！！</p>]]>
    
    </summary>
    
      <category term="software" scheme="http://linnever.github.io/tags/software/"/>
    
      <category term="software" scheme="http://linnever.github.io/categories/software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git]]></title>
    <link href="http://linnever.github.io/2015/08/12/git/"/>
    <id>http://linnever.github.io/2015/08/12/git/</id>
    <published>2015-08-11T19:24:26.000Z</published>
    <updated>2015-12-09T20:17:13.506Z</updated>
    <content type="html"><![CDATA[<p>git error</p>
<p>Error: Permission denied (publickey)<br>you can see <a href="https://help.github.com/articles/error-permission-denied-publickey/" target="_blank" rel="external">this</a><br><a id="more"></a></p>
<h2 id="my_error">my error</h2><p>如果你把电脑语言从英文改成中文。c盘目录下的<strong>用户</strong>文件会替换掉<strong>User</strong>文件夹。在添加新的ssh的时候，目录还会是<strong>user</strong>的目录。所以github官方会拒绝你的链接。</p>
<h2 id="移除跟踪文件">移除跟踪文件</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> rm --cached FILENAME</span><br></pre></td></tr></table></figure>
<p>不会删除文件，如果后面跟的是目录就加上个<code>-r</code>就行了。</p>
<h2 id="add带有空格的文件夹">add带有空格的文件夹</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> add <span class="string">'file name'</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>git error</p>
<p>Error: Permission denied (publickey)<br>you can see <a href="https://help.github.com/articles/error-permission-denied-publickey/">this</a><br>]]>
    
    </summary>
    
      <category term="git" scheme="http://linnever.github.io/tags/git/"/>
    
      <category term="git" scheme="http://linnever.github.io/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode-41]]></title>
    <link href="http://linnever.github.io/2015/07/20/LeetCode-41/"/>
    <id>http://linnever.github.io/2015/07/20/LeetCode-41/</id>
    <published>2015-07-20T08:20:45.000Z</published>
    <updated>2015-08-11T16:55:28.382Z</updated>
    <content type="html"><![CDATA[<h2 id="First_Missing_Positive">First Missing Positive</h2><p>Given an unsorted integer array, find the first missing positive integer.</p>
<p>For example,<br>Given [1,2,0] return 3,<br>and [3,4,-1,1] return 2.</p>
<p>Your algorithm should run in O(n) time and uses constant space.<br><a id="more"></a></p>
<h3 id="题目大意：">题目大意：</h3><ol>
<li>按依次顺序找到数组中第一个缺少的正整数。</li>
<li>时间复杂度要求为O(n),空间复杂度为O(1)</li>
</ol>
<h3 id="解题思路：">解题思路：</h3><ol>
<li>因为要求空间复杂度为O(1)所以，不能使用额外的空间，只能在原数组上进行处理，最先开始想到先把数组排序，再去判断，但是，现有的排序算法中没有O(n)效率，最低也只有快排，而且代码量长需要用到额外的空间。</li>
<li>查询discuss，其他的答案，发现他们的解法很棒。</li>
</ol>
<h3 id="解法有如下：">解法有如下：</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int firstMissingPositive(int[] A) <span class="comment">&#123;</span><br><span class="line">       int i = 0;</span><br><span class="line">       while(i &lt; A.length)&#123;</span><br><span class="line">           if(A[i] == i+1 || A[i] &lt;= 0 || A[i] &gt; A.length) i++;</span><br><span class="line">           else if(A[A[i]-1] != A[i]) swap(A, i, A[i]-1);</span><br><span class="line">           else i++;</span><br><span class="line">       &#125;</span></span><br><span class="line">       i = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(i &lt; A.length &amp;&amp; A[i] == i+<span class="number">1</span>) i++;</span><br><span class="line">       return i+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> void swap(int[] A, int i, int j)<span class="comment">&#123;</span><br><span class="line">       int temp = A[i];</span><br><span class="line">       A[i] = A[j];</span><br><span class="line">       A[j] = temp;</span><br><span class="line">   &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="First_Missing_Positive">First Missing Positive</h2><p>Given an unsorted integer array, find the first missing positive integer.</p>
<p>For example,<br>Given [1,2,0] return 3,<br>and [3,4,-1,1] return 2.</p>
<p>Your algorithm should run in O(n) time and uses constant space.<br>]]>
    
    </summary>
    
      <category term="LeetCode" scheme="http://linnever.github.io/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://linnever.github.io/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode-153]]></title>
    <link href="http://linnever.github.io/2015/07/19/LeetCode-153/"/>
    <id>http://linnever.github.io/2015/07/19/LeetCode-153/</id>
    <published>2015-07-19T09:15:05.000Z</published>
    <updated>2015-08-11T17:02:00.822Z</updated>
    <content type="html"><![CDATA[<h2 id="Find_Minimum_in_Rotated_Sorted_Array">Find Minimum in Rotated Sorted Array</h2><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.</p>
<h2 id="题目大意：">题目大意：</h2><p>据提交后了解到：</p>
<ol>
<li>该数组实在单调递增的情况下的</li>
<li>该数组可能就是单调递增的，也可能是在某个节点旋转了。</li>
</ol>
<a id="more"></a>
<h2 id="解题思路：">解题思路：</h2><ol>
<li>看到排序，然后又要查找，一般就是二分查找法。</li>
</ol>
<h2 id="解体答案：">解体答案：</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//O(lgn)</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public int findMin(int[] <span class="built_in">num</span>) &#123;</span><br><span class="line">      int <span class="built_in">len</span> = <span class="built_in">num</span>.<span class="built_in">length</span>;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span> == <span class="number">1</span>) <span class="constant">return</span> <span class="built_in">num</span>[<span class="number">0</span>];  </span><br><span class="line">        int left = <span class="number">0</span>, <span class="constant">right</span> = <span class="built_in">len</span>-<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">num</span>[left] &gt; <span class="built_in">num</span>[<span class="constant">right</span>]) &#123;<span class="comment"> // good idea  </span></span><br><span class="line">            int <span class="keyword">mid</span> = (left + <span class="constant">right</span>) / <span class="number">2</span>;  </span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">num</span>[<span class="keyword">mid</span>] &gt; <span class="built_in">num</span>[<span class="constant">right</span>]) &#123;  </span><br><span class="line">                left = <span class="keyword">mid</span> + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="constant">right</span> = <span class="keyword">mid</span>;<span class="comment"> // be careful, not mid-1, as num[mid] maybe the minimum  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="constant">return</span> <span class="built_in">num</span>[left];  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\\O(lgn) <span class="operator">not</span> good enough</span><br><span class="line">public int findMin1(int[] <span class="built_in">num</span>) &#123;</span><br><span class="line">int <span class="built_in">len</span> = <span class="built_in">num</span>.<span class="built_in">length</span>;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span> == <span class="number">1</span>) &#123;  </span><br><span class="line">            <span class="constant">return</span> <span class="built_in">num</span>[<span class="number">0</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; <span class="built_in">len</span>; i++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">num</span>[i] &lt; <span class="built_in">num</span>[i-<span class="number">1</span>]) &#123;  </span><br><span class="line">                <span class="constant">return</span> <span class="built_in">num</span>[i];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="constant">return</span> <span class="built_in">num</span>[<span class="number">0</span>]; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Find_Minimum_in_Rotated_Sorted_Array">Find Minimum in Rotated Sorted Array</h2><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.</p>
<h2 id="题目大意：">题目大意：</h2><p>据提交后了解到：</p>
<ol>
<li>该数组实在单调递增的情况下的</li>
<li>该数组可能就是单调递增的，也可能是在某个节点旋转了。</li>
</ol>]]>
    
    </summary>
    
      <category term="LeetCode" scheme="http://linnever.github.io/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://linnever.github.io/categories/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode-219]]></title>
    <link href="http://linnever.github.io/2015/07/18/LeetCode-219/"/>
    <id>http://linnever.github.io/2015/07/18/LeetCode-219/</id>
    <published>2015-07-17T18:29:25.000Z</published>
    <updated>2015-08-11T17:02:36.397Z</updated>
    <content type="html"><![CDATA[<h1 id="Contains_Duplicate_II">Contains Duplicate II</h1><p>Given an array of integers and an integer k, find out whether there there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k. </p>
<h2 id="题目大意：">题目大意：</h2><p>给定一个整数数组nums与一个整数k，当且仅当存在两个不同的下标i和j满足nums[i] = nums[j]并且| i - j | &lt;= k时返回true，否则返回false。<br><a id="more"></a></p>
<h2 id="解题思路：">解题思路：</h2><ol>
<li>当且仅当说明整个数组里有且只有两个数字相同，而且它们的下标差绝对值不大于k。</li>
<li>返回为true的可能性要小，有特殊性（在k个字符内有且仅有两个相同的字符）。所以，可以用k长的窗口，在窗口里去判断是否有相同的字符，而字符的唯一性，设置一个变量来记录。</li>
<li>尽量使用复杂度低的算法，该算法时间复杂度为O(N)的。</li>
</ol>
<h2 id="实现方法如下：">实现方法如下：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; appearedNum = <span class="keyword">new</span> HashSet&lt;Integer&gt;();  </span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, num=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(!appearedNum.contains(nums[i]))&#123;  </span><br><span class="line">                appearedNum.add(nums[i]);  </span><br><span class="line">                end++;  <span class="comment">//窗口往后移动</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> num++;  <span class="comment">//确定唯一性</span></span><br><span class="line">            <span class="keyword">if</span>(end - start  &gt; k) &#123;  </span><br><span class="line">                appearedNum.remove(nums[start]);  <span class="comment">//时刻保持appearedNum里只有k个字符</span></span><br><span class="line">                start++;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>) <span class="comment">//判断是否唯一</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Contains_Duplicate_II">Contains Duplicate II</h1><p>Given an array of integers and an integer k, find out whether there there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k. </p>
<h2 id="题目大意：">题目大意：</h2><p>给定一个整数数组nums与一个整数k，当且仅当存在两个不同的下标i和j满足nums[i] = nums[j]并且| i - j | &lt;= k时返回true，否则返回false。<br>]]>
    
    </summary>
    
      <category term="LeetCode" scheme="http://linnever.github.io/tags/LeetCode/"/>
    
      <category term="LeetCode" scheme="http://linnever.github.io/categories/LeetCode/"/>
    
  </entry>
  
</feed>
